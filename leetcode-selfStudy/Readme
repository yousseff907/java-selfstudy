# Leetcode Self-Study

A comprehensive collection of coding solutions covering fundamental algorithms, data structures, and object-oriented programming concepts.

## Categories

### **Algorithms**
- `binarySearch.java` - Find peak element using binary search
- `binarySearchtwo.java` - Standard binary search implementation
- `BadAPI.java` - Find first bad version (binary search variant)
- `TwoSum.java` - Find two numbers that sum to target using HashMap
- `maxSum.java` - Maximum subarray sum (Kadane's Algorithm)
- `mergeIntervals.java` - Merge overlapping intervals
- `MergeSorted.java` - Merge two sorted arrays in-place

### **Data Structures**
- `validParenth.java` - Valid parentheses using Stack
- `reverseInPlace.java` - Reverse string in-place using two pointers
- `elementRemoval.java` - Remove elements from array in-place
- `RotatebyK.java` - Rotate array by k positions

### **Object-Oriented Design**
- `LibraryManagement.java` - Complete library system (Book, Member, Library classes)
- `BankManagementSystem.java` - Banking system with inheritance (Account, SavingsAccount, CheckingAccount)
- `EmployeeManagement.java` - Employee hierarchy with polymorphism (Manager, Developer, Designer)

### **String Processing**
- `StrongPassword.java` - Password strength validator
- `Palindrome.java` - Palindrome checker with preprocessing
- `FizzBuzz.java` - Classic FizzBuzz implementation

### **Financial/Mathematical**
- `FinancialCalculator.java` - Compound interest calculator
- `Portfolio.java` - Portfolio value calculator using HashMaps

## Key Concepts Covered

- **Algorithms**: Binary search, two pointers, sliding window, dynamic programming
- **Data Structures**: Arrays, HashMaps, Stacks, Lists
- **OOP**: Inheritance, polymorphism, encapsulation, abstraction
- **Design Patterns**: Template method, strategy pattern
- **Problem Solving**: Edge case handling, input validation, error management

## Usage

Each file is self-contained with a main method for testing:

```bash
javac filename.java
java filename [arguments]
```